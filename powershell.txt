================================================================================
[001] [基礎知識] ポリシー設定
[002] [基礎知識] スクリプト実行
[003] [基礎知識] ヘルプ表示
[004] [基礎知識] コンソール出力
[005] [基礎知識] コメント
[006] [基礎知識] 複数ステートメント
[007] [基礎知識] 変数
[008] [基礎知識] 自動変数
[009] [基礎知識] 定数
[010] [基礎知識] データ型
[011] [基礎知識] 数値加工の関数
[012] [基礎知識] 文字列中の変数展開
[013] [基礎知識] ヒアドキュメント
[014] [基礎知識] 文字列操作
================================================================================
[001]
  [基礎知識] ポリシー設定
  
[内容]
  ## ポリシー
    Resticted   : スクリプト実行が許可されていない
    RmoteSigned : ローカルスクリプトは署名されていなくても実行可、リモートスクリプトは署名有りで実行可
  
  ## コマンド
    Get-ExecutionPolicy : ポリシー設定の表示
    Set-ExecutionPolicy : ポリシー設定
  
[確認]
  $ cd $HOME
  $ Get-ExecutionPolicy
  
  コマンドの実行結果
  --------------------------------------------------
  RemoteSigned (このポリシーでOK)
  --------------------------------------------------
  
  $ cd $HOME
  $ Set-ExecutionPolicy RemoteSigned
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[002]
  [基礎知識] スクリプト実行
  
[内容]
  ## スクリプト
    拡張子が「ps1」であることが条件
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  Write-Host "Hello World"
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[003]
  [基礎知識] ヘルプ表示
  
[内容]
  ## ヘルプ表示
    コマンドレットのヘルプ表示
  
  ## コマンド
    Get-Help : ヘルプ表示
  
[確認]
  $ cd $HOME
  $ Get-Help Write-Host
  
  コマンドの実行結果
  --------------------------------------------------
  名前
    Write-Host
  
  構文
    Write-Host [[-Object] <Object>]  [<CommonParameters>]
  
  エイリアス
    なし
  --------------------------------------------------
  
  $ cd $HOME
  $ Get-Help Write-Host -online
  
  コマンドの実行結果
  --------------------------------------------------
  (オンラインヘルプ表示)
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[004]
  [基礎知識] コンソール出力
  
[内容]
  ## コンソール出力
    文字列のコンソール出力とオブジェクト情報の標準出力(コンソール出力)
  
  ## コマンド
    Write-Host   : 文字列のコンソール出力
    Write-Output : オブジェクト情報を標準出力(コンソール出力)
  
[確認]
  $ cd $HOME
  $ Write-Host "LPIC3\" | Get-ChildItem
  
  コマンドの実行結果
  --------------------------------------------------
  LPIC3\
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Output "LPIC3\" | Get-ChildItem
  
  コマンドの実行結果
  --------------------------------------------------
  ディレクトリ: C:\Users\mj-ar\LPIC3
  
  Mode     LastWriteTime      Length   Name
  -a----   2025/02/23 13:08     3841   powershell.txt
  -a----   2025/02/23 12:38       38   README.md
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[005]
  [基礎知識] コメント
  
[内容]
  ## コメント
    単数行コメントと複数行コメント
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  # 単数行コメント
  Write-Host "Hello World1"
  
  <# 複数行コメント1
     複数行コメント2
     複数行コメント3 #>
  Write-Host "Hello World2"
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World1
  Hello World2
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[006]
  [基礎知識] 複数ステートメント
  
[内容]
  ## 複数ステートメント
    セミコロン「;」で複数ステートメントを１行で記述する
  
[確認]
  $ cd $HOME
  $ Write-Host "Hello World1" ; Write-Host "Hello World2 "
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World1
  Hello World2
  --------------------------------------------------
  
  $ cd $HOME
  $ $var1 = "Hello World1" ; $var2 = "Hello World2" ; Write-Host $var1 ; Write-Host $var2
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World1
  Hello World2
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[007]
  [基礎知識] 変数
  
[内容]
  ## 変数
    変数は「$変数名」で表される
  
  ## コマンド
    Clear-Variable : 変数の値をクリア
    Rmove-Variable : 変数自体を削除
  
[確認]
  $ cd $HOME
  $ $MyName = "Makoto-Araki" ; Write-Host $MyName
  
  コマンドの実行結果
  --------------------------------------------------
  Makoto-Araki
  --------------------------------------------------
  
  $ cd $HOME
  $ Clear-Variable -Name MyName ; Write-Host $MyName
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME
  $ Remove-Variable -Name MyName
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[008]
  [基礎知識] 自動変数
  
[内容]
  ## 自動変数(一部抜粋)
    $true  : 真値
    $false : 偽値
    $null  : ヌル
    $$     : 最後に実行したステートメント
    $?     : 最後に実行したステートメントの実行結果(true/false)
    $Home  : ホームディレクトリ
    $PWD   : カレントディレクトリ
  
[確認]
  $ cd $HOME
  $ Write-Host $PWD
  
  コマンドの実行結果
  --------------------------------------------------
  C:\Users\mj-ar
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host $?
  
  コマンドの実行結果
  --------------------------------------------------
  True
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[009]
  [基礎知識] 定数
  
[内容]
  ## 定数
    定数は「Set-Variable -Name 定数名 -Value 値 -Option Constant」の形式で定義
  
  ## コマンド
    Set-Variable : 変数を定義($変数名で同じ効果のため使われない？)
  
[確認]
  $ cd $HOME
  $ Set-Variable -Name MAX_SIZE -Value 200 -Option Constant
  
  コマンドの実行結果
  --------------------------------------------------
  (出力なし)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host $MAX_SIZE
  
  コマンドの実行結果
  --------------------------------------------------
  200
  --------------------------------------------------
  
  $ cd $HOME
  $ $MAX_SIZE = 1000
  
  コマンドの実行結果
  --------------------------------------------------
  変数 MAX_SIZE は読み取り専用または定数であるため、上書きできません
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[010]
  [基礎知識] データ型
  
[内容]
  ## データ型(一部抜粋)
    整数
    実数
    文字列
    配列
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  # 整数
  $var01 = 100
  
  # 整数(型指定)
  [int]$var02 = 100
  
  # 実数
  $var03 = 100.234
  
  # 実数(型指定)
  [double]$var04 = 100.234
  
  # 文字列
  $var05 = "ABC"
  
  # 文字列(型指定)
  [string]$var06 = "ABC"
  
  # 配列
  $var07 = @("A", "B", "C")
  
  # 配列(型指定)
  [array]$var08 = @("A", "B", "C")
  
  # コンソール出力
  Write-Host $var01
  Write-Host $var02
  Write-Host $var03
  Write-Host $var04
  Write-Host $var05
  Write-Host $var06
  Write-Host $var07
  Write-Host $var08
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  100
  100
  100.234
  100.234
  ABC
  ABC
  A B C
  A B C
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[011]
  [基礎知識] 数値加工の関数
  
[内容]
  ## 数値加工の関数
    Floor   : 小数点切り捨て
    Ceiling : 小数点切り上げ
    Round   : 四捨五入(銀行丸め)
    Abs     : 絶対値
    Pow     : 累乗
    Max     : 大きい値を選択
    Min     : 小さい値を選択
    Sin     : 三角関数(sin)
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  # 小数点切り捨て
  $var01 = [Math]::Floor(123.456)
  
  # 小数点切り上げ
  $var02 = [Math]::Ceiling(123.456)
  
  # 四捨五入
  $var03 = [Math]::Round(123.456)
  
  # 絶対値
  $var04 = [Math]::Abs(-123)
  
  # 累乗
  $var05 = [Math]::Pow(2, 10)
  
  # 大きい値を選択
  $var06 = [Math]::Max(3, 5)
  
  # 小さい値を選択
  $var07 = [Math]::Min(3, 5)
  
  # 三角関数(sin)
  $var08 = [Math]::Sin([Math]::PI / 2)
  
  # コンソール出力
  Write-Host $var01
  Write-Host $var02
  Write-Host $var03
  Write-Host $var04
  Write-Host $var05
  Write-Host $var06
  Write-Host $var07
  Write-Host $var08
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  123
  124
  123
  123
  1024
  5
  3
  1
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[012]
  [基礎知識] 文字列中の変数展開
  
[内容]
  ## 文字列中の変数展開
    "Hello $var01"
    "Hello ${var01}"
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  # 文字列
  $var01 = "World"
  $var02 = "World"
  
  # 文字列中の変数展開1
  Write-Host "Hello $var01"
  
  # 文字列中の変数展開2
  Write-Host "Hello ${var02}"
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World
  Hello World
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[013]
  [基礎知識] ヒアドキュメント
  
[内容]
  ## ヒアドキュメント
    $var01 = @"
    Hello World
    Hello World
    "@
  
[確認]
  $ cd $HOME
  $ notepad test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  # 文字列
  $var01 = @"
  Hello World
  Hello World
  "@
  
  # ヒアドキュメント
  Write-Host $var01
  --------------------------------------------------
  
  $ cd $HOME
  $ ./test.ps1
  
  コマンドの実行結果
  --------------------------------------------------
  Hello World
  Hello World
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
[014]
  [基礎知識] 文字列操作
  
[内容]
  ## 文字列操作
    SubString
    Remove
    Insert
    Replace
    IndexOf
    LastIndexOf
    Split
    Contains
    StartsWith
    EndsWith
    ToUpper
    ToLower
    Trim
    TrimStart
    TrimEnd
  
[確認]
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".SubString(2, 4)
  
  コマンドの実行結果
  --------------------------------------------------
  CDEF (インデックス02から04文字分を取得)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".Remove(2, 4)
  
  コマンドの実行結果
  --------------------------------------------------
  ABGHIJKL (インデックス02から04文字分を削除)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".Insert(2, "aaa")
  
  コマンドの実行結果
  --------------------------------------------------
  ABaaaCDEFGHIJKL (インデックス02から文字列を挿入)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".Replace("ABC", "abc")
  
  コマンドの実行結果
  --------------------------------------------------
  abcDEFGHIJKL (文字列ABCをabcに置換)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKLABCDEFGHIJKL".IndexOf("DEF")
  
  コマンドの実行結果
  --------------------------------------------------
  3 (文字列DEFの最初から見て見つかるインデックス)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKLABCDEFGHIJKL".LastIndexOf("DEF")
  
  コマンドの実行結果
  --------------------------------------------------
  15 (文字列DEFの最後から見て見つかるインデックス)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABC,DEF,GHI,JKL".Split(",")
  
  コマンドの実行結果
  --------------------------------------------------
  ABC DEF GHI JKL (区切り文字で分割後に配列で返す)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".Contains("DEF")
  
  コマンドの実行結果
  --------------------------------------------------
  True (文字列DEFが含まれているか判定)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".StartsWith("ABC")
  
  コマンドの実行結果
  --------------------------------------------------
  True (文字列ABCから始まるか判定)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".EndsWith("ABC")
  
  コマンドの実行結果
  --------------------------------------------------
  False (文字列ABCで終わるか判定)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "abcedfghijkl".ToUpper()
  
  コマンドの実行結果
  --------------------------------------------------
  ABCEDFGHIJKL (文字列を大文字化)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host "ABCDEFGHIJKL".ToLower()
  
  コマンドの実行結果
  --------------------------------------------------
  abcdefghijkl (文字列を小文字化)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host " ABC DEF GHI JKL ".Trim()
  
  コマンドの実行結果
  --------------------------------------------------
  ABC DEF GHI JKL (文字列の前後の空白を削除)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host " ABC DEF GHI JKL ".TrimStart()
  
  コマンドの実行結果
  --------------------------------------------------
  ABC DEF GHI JKL (文字列の前の空白を削除)
  --------------------------------------------------
  
  $ cd $HOME
  $ Write-Host " ABC DEF GHI JKL ".TrimEnd()
  
  コマンドの実行結果
  --------------------------------------------------
   ABC DEF GHI JKL (文字列の後の空白を削除)
  --------------------------------------------------
  
  次の確認に続く
  
================================================================================
